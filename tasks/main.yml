---

# Install and configure SELinux
- name: install the libselinux-python package
  yum: name=libselinux-python state=installed

- name: install the libsemanage-python package
  yum: name=libsemanage-python state=installed

- name: Reload ansible_facts
  setup:

- name: enable SELinux
  selinux: policy=targeted state=enforcing
  when: ansible_selinux.status=="disabled"

- name: force relabel
  file: path="/.autorelabel" state=touch
  when: ansible_selinux.status=="disabled"

- name: restart remote server
  shell: sleep 2 && /sbin/shutdown -r now "Ansible reboot triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: ansible_selinux.status=="disabled"

- name: wait for the server to come back
  local_action: wait_for
  args:
    host: "{{ inventory_hostname }}"
    port: 22
    state: started
    delay: 15
    timeout: 300
    connect_timeout: 15
  when: ansible_selinux.status=="disabled"

# Common system configuration tasks like setting hostname, timezone etc.
- name: set hostname
  hostname: name={{ server_hostname }}

- name: update existing packages
  yum: name=* state=latest

- name: install utils and libraries
  yum: name={{ item }} state=present
  with_items: [ ntp, screen, attr, bc, curl, bind-utils, bzip2, ftp, git, hdparm, latrace, lsof, mc , mtr, nano, nail, nc, iotop, net-tools, psmisc, rsync, strace, svn, tcpdump, telnet, traceroute, unzip, vim-common, vim-enhanced, wget, yum-utils, zip, wget ]

# (redundant from selinux.yml) we install in case we need it
- name: install the libselinux-python package
  yum: name=libselinux-python state=installed

# (redundant from selinux.yml) we install in case we need it
- name: install the libsemanage-python package
  yum: name=libsemanage-python state=installed

- name: delete default system timezone
  file:
    path: /etc/localtime
    state: absent

- name: set system timezone
  file: src="{{ system_timezone }}" dest="/etc/localtime" state="link"

- name: start ntpd daemon
  service: name=ntpd state=started enabled=yes

- name: enable crond
  service: name=crond enabled=yes

- name: install postfix
  yum: name=postfix state=present

- name: start and enable postfix
  service: name=postfix state=started enabled=yes

# Redirect root mail to a valid address
- name: remove old root from aliases
  lineinfile: dest=/etc/aliases
              regexp="^#root:"
              state=absent

- name: add root mail alias
  lineinfile: dest=/etc/aliases
              line="root{{':'}}   {{root_email_alias}}"
              insertafter="# Person who should get root's mail"

- name: enhance password quality
  copy: src="files/pwquality.conf" dest="/etc/security/pwquality.conf"

- name: enable wheel group
  lineinfile:
    dest: "/etc/sudoers"
    regexp: "^%wheel"
    line: "%wheel ALL=(ALL) NOPASSWD: ALL"
    state: "present"

- name: create system accounts
  user: name="{{ item.username }}" comment="{{ item.comment }}"
    group="{{ item.group }}" groups="{{ item.groups }}"
    append="{{ item.append }}" shell="{{ item.shell }}"
    state="{{ item.state }}"
  with_items: "{{ users_system }}"

- name: install openssh keys
  authorized_key: user="{{ item.username }}" key="{{ item.key }}" state="{{ item.state }}"
  with_items: "{{ sshd_authorized_keys }}"

- name: Disallow older versions of the SSH protocol
  lineinfile: dest=/etc/ssh/sshd_config
          regexp="^Protocol"
          line="Protocol 2"
          state=present
          insertafter="#Protocol 2"
  notify: restart sshd

- name: Disallow password authentication
  lineinfile: dest=/etc/ssh/sshd_config
          regexp="^PasswordAuthentication"
          line="PasswordAuthentication no"
          state=present
  notify: restart sshd

- name: Disallow root SSH access
  lineinfile: dest=/etc/ssh/sshd_config
          regexp="^PermitRootLogin"
          line="PermitRootLogin no"
          state=present
  notify: restart sshd
